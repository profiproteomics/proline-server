package fr.profi.obo

import scala.io.BufferedSource
import fr.profi.util.serialization.ProfiJson

/**
 * Ontology
 * 
 * @param id Gives the id of the current ontology. 
 * @param name Gives the name of the current ontology. 
 * @param sourceUrl A url pointing to the OBO document describing this ontology.
 * @param dataVersion Gives the version of the current ontology. 
 * @param date The current date in dd:MM:yyyy HH:mm format. 
 * @param savedBy The username of the person to last save this file.
 * @param autoGeneratedBy The program that generated the file. 
 * @param subsetDef A description of a term subset.
 * @param importUrl A url pointing to another OBO document.
 * @param synonymTypeDef A description of a user-defined synonym type.
 * @param idSpace A mapping between a "local" ID space and a "global" ID space.
 * @param defaultRelationshipIdPrefix Any relationship lacking an ID space will be prefixed with the value of this tag.
 * @param idMapping Maps a Term or Typedef ID to another Term or Typedef ID.
 * @param remark General comments for this file.
 */
trait Ontology {
  def id: String
  def name: String
  def sourceUrl: String
  def dataVersion: String
  
  def jsonTermsResource: BufferedSource
  
  lazy val oboTerms: Array[OboTerm] = {
    val termsAsJson = jsonTermsResource.getLines().mkString("")
    ProfiJson.deserialize[Array[OboTerm]](termsAsJson)
  }
  
  lazy val oboTermByIdString: Map[String,OboTerm] = {
    oboTerms.map( t => t.id -> t ).toMap
  }
  
}

/*
trait OboTermIdEnumeration extends Enumeration {
  
  class TermId(i: Int, name: String) extends Val(i: Int, name: String) {
    @transient val enum: Enumeration = OboTermIdEnumeration.this
  }
  
  override protected def Value(i: Int, name: String): Value = new TermId(i, name) 
}*/